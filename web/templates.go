// Code generated by go-bindata.
// sources:
// src/github.com/ant30/raspidash/web/layouts/base.html
// src/github.com/ant30/raspidash/web/templates/index.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _layoutsBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xdf\x7b\xda\x36\x14\x7d\xcf\x5f\xa1\xf8\xa5\x5b\x36\xdb\x0d\x90\x91\x74\x36\xdf\x97\x92\x8c\x40\x13\x42\x80\x40\x58\xbf\x3e\x08\xfb\xda\x96\xd1\x0f\x47\x92\x01\xaf\x5f\xff\xf7\xc9\x18\x0a\xdd\x9a\xae\x7b\xe8\x13\xba\x92\xee\xd1\xb9\xe7\xdc\x6b\xbc\xe3\xab\xfb\xf6\x78\x36\xb8\x46\x89\x66\xb4\x75\xe4\x95\x3f\x88\x62\x1e\xfb\x16\x70\xab\x75\x84\x90\x97\x00\x0e\xcb\x85\x59\x32\xd0\x18\x05\x09\x96\x0a\xb4\x6f\xe5\x3a\xb2\xcf\xad\xc3\xa3\x44\xeb\xcc\x86\xe7\x9c\x2c\x7d\xeb\xc9\x7e\xbc\xb4\xdb\x82\x65\x58\x93\x39\x05\x0b\x05\x82\x6b\xe0\x26\xaf\x7b\xed\x43\x18\xc3\x17\x99\x1c\x33\xf0\xad\x25\x81\x55\x26\xa4\x3e\xb8\xbc\x22\xa1\x4e\xfc\x10\x96\x24\x00\x7b\x13\xfc\x8a\x08\x27\x9a\x60\x6a\xab\x00\x53\xf0\x4f\x77\x40\xc7\xb6\x8d\xc6\x09\x20\x3c\x17\x4b\x40\x75\xb4\x01\xd6\x38\x56\xe8\x84\xe5\x4a\x9f\x18\x50\x06\x28\x22\x52\x69\x03\x81\xb4\xb9\x5a\xd6\xf6\x3b\xc2\xbc\x40\xc2\x84\x72\x13\xef\xde\x46\x65\x52\x95\x73\x82\x23\x0d\xf2\xa4\x4c\x51\x50\x41\xda\xf6\xf6\x55\x4d\x34\x85\xd6\xc7\x8f\x68\x4e\x45\xb0\x40\xd6\x26\xb6\x90\x83\x3e\x7d\x2a\xc9\x8c\x02\x09\xc0\xd1\x1d\xe6\x38\x06\x69\xae\x01\x0f\xcd\x91\xe7\x56\x79\x47\x7b\xea\x37\xe3\xbb\xdb\x33\xa4\x12\xc2\x0c\xa1\x10\x0d\x41\x65\x82\x87\x4e\xaa\x50\x24\x24\xea\x5e\x9f\x23\x95\x67\xa5\x3a\x48\x44\xdb\xcb\x40\x81\x19\xa6\x6a\x93\xc0\x20\x24\x18\x3d\xe7\x20\x09\x1c\xf0\x2b\xa1\xa7\x97\xc3\x7e\xb7\xdf\x79\x73\x08\x1a\x0a\x50\xfc\x95\x46\x2b\x21\x17\x88\x44\xa8\x10\x39\x2a\xf5\xdf\xe8\x92\x19\xb2\x26\xc2\x46\x2d\x0a\x6f\x5c\xf7\x0b\xb8\xf7\xe6\x36\xd5\x86\x11\xba\xf8\x50\xed\x9a\x7d\x15\x48\x92\x69\xa4\x64\xe0\x5b\x65\x1b\x28\x93\x25\x94\x72\x18\x5e\x07\x21\x77\x8c\x8c\x6e\xd9\x5b\x67\xa6\xbe\xa5\x5b\x77\x9a\x4e\x7d\x1f\x3b\x8c\x70\x43\xc9\x6a\x79\x6e\x05\xf3\x7f\x50\x65\x55\x92\x7b\xea\x34\x9c\xda\x2e\x7a\x01\xd1\x3b\x7e\x6f\xe4\x27\xd1\x87\xaa\x1c\xcf\xdd\xf5\xb6\x37\x17\x61\x71\x20\xd8\xae\x05\x2a\x4f\x77\xc5\xef\x4d\xde\x9e\x57\x36\x7b\x59\xeb\x9a\x65\xba\x40\x1a\x58\x46\xb1\x06\xcf\xcd\x5a\x9f\x9d\xde\x83\x96\xf1\xbf\x81\xf7\xe7\xb7\x26\xb5\xea\xb8\xcc\xa8\x1e\x56\xa6\x9a\x5e\x8f\x88\x09\xda\xa3\xd1\xde\x04\x4a\xf8\x02\x49\xa0\xbe\xa5\x74\x41\x41\x25\x00\x86\x4b\x22\x21\xda\xcb\xb4\x95\x68\x2e\x84\x56\x5a\xe2\x6c\xa7\xd7\xe7\x0d\xe3\x82\xf1\xc1\x0d\x94\xda\xef\x6d\x74\x33\x3b\x96\x19\x10\x0d\xb1\x24\xba\x30\x6f\x24\xb8\x7e\xde\xb0\xdf\x4e\x66\x84\x8c\xba\x7f\xc0\xbb\xd3\xb0\xc3\x7a\xc3\xcb\x45\x11\xe4\x37\x97\x37\xc3\xb8\x5e\xbb\x67\x8f\xc1\x6a\xd5\x14\xbc\x3e\x9c\x85\x71\x63\x82\x7f\x19\xb0\xd1\x58\xfd\xe5\xbe\xfb\xed\x7c\x39\x0f\xaf\xd3\xa4\x91\x9b\xa1\x96\xc6\x3b\x21\x49\x4c\xb8\x6f\x61\x2e\x78\xc1\x44\x6e\x4c\x3a\xd0\xe0\x3e\xd3\x44\x70\x4c\xcb\x2e\x34\x83\xf7\xe3\x2b\xb6\x37\x0f\x7d\xab\x6e\x79\x53\x88\xfe\x29\x19\xaa\xc9\xd3\xa4\xc1\xaf\x5e\xf7\x72\x4d\x79\x07\x2b\xda\xee\xe5\xed\x66\xbe\x4a\xc3\x7c\x7a\x31\x9a\xc8\xdb\xe5\x70\x26\xc4\x20\xab\xcd\xa7\xb3\x98\xc5\xbd\x87\xee\xd3\x8a\xba\xa3\xec\xbb\xea\x4e\x1f\xcc\xdc\x16\xe8\x27\x0e\x01\x28\x85\xcd\xb2\x1c\xfa\xb7\x3b\x96\xaf\x14\xea\xe1\x25\x1e\x55\xe3\x90\xd1\xdc\x40\xa9\x9f\xf7\xf2\x7c\x6d\x4e\x70\x8a\xd7\x4e\x2c\x44\x4c\x01\x67\x44\x6d\xa4\x28\xf7\x5c\x4a\xe6\xca\x4d\xcb\x0f\x45\x61\xa6\xe6\xb4\xe6\x34\xb6\xd1\x8b\x53\xf3\x5f\xcd\x79\xc0\xed\x9b\x94\xbe\xd7\xa1\xf4\x9f\x2d\x99\x7e\xd5\x99\x71\x70\xd6\x7d\x20\xf3\xd7\xb5\xe6\xf3\xb2\x48\x47\x77\xd1\x4d\x7a\x7f\x87\x6f\x17\x51\x3e\x9d\xac\xff\x5c\x3f\x0e\x78\xbb\x77\xd9\xa4\x35\xd6\x9e\xf6\xbb\x59\xe7\x82\x75\xda\x57\xe7\xab\x4e\xbf\x1b\x0c\xae\x9a\xe3\x35\x7e\xd9\x99\x43\x01\x3c\xb7\xfa\x38\x78\x6e\xf5\x1f\xf9\x77\x00\x00\x00\xff\xff\x3c\x3c\xb0\x7b\x34\x07\x00\x00")

func layoutsBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsBaseHtml,
		"layouts/base.html",
	)
}

func layoutsBaseHtml() (*asset, error) {
	bytes, err := layoutsBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/base.html", size: 1844, mode: os.FileMode(420), modTime: time.Unix(1481059197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcc\x31\x0e\xc2\x30\x0c\x85\xe1\xbd\xa7\xb0\x7a\x80\x54\xac\xa8\x62\x62\x65\xa2\x62\x0f\xe9\x2b\x8d\xe4\x3a\x28\x31\x48\xa8\xea\xdd\x71\x98\x80\xd1\xf6\xe7\x7f\x5d\x49\xb1\xdc\xd9\x2b\xa8\x65\xff\x4a\x0f\x2d\xdd\xd5\x17\xb8\x59\x17\x6e\xc9\xd1\xb6\x35\x8d\xa9\x11\x53\x14\x33\x1a\x95\xd1\xd6\xed\x70\xa1\x73\xc8\x80\xd0\xc9\x8b\xbf\x21\xd3\x94\x32\x19\x75\x43\x35\x95\xd8\x00\x19\xff\x13\x21\x89\x42\xf4\x13\xe9\xe7\xdd\xe1\x88\x67\x0c\x20\x8e\x45\xf7\x3f\xff\x7d\x67\xd7\xaf\xc8\x3b\x00\x00\xff\xff\x87\x02\xbd\x86\xad\x00\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 173, mode: os.FileMode(420), modTime: time.Unix(1481061165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"layouts/base.html": layoutsBaseHtml,
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"layouts": &bintree{nil, map[string]*bintree{
		"base.html": &bintree{layoutsBaseHtml, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

